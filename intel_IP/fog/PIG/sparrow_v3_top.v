
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module sparrow_v3_top(

	//////////// CLOCK //////////
	CLOCK_50,

	//////////// LED //////////
	LED1,
	LED2,
	//////////// PROBE //////////
	P_K5, 
	//////////// DAC //////////
	DAC1,
	DAC2,
	DAC_CLK,
	DAC_RST,
	//////////// ADC //////////
	ADC_D1,
	ADC_CLK,
	ADC_OF1,
	//////////// SPI-ADDA //////////
	MISO,
	MOSI,
	SCLK,
	CS_DAC,
	CS_ADC,
	//////////// TRIGGER //////////
	TRIG_IN,
	//////////// I2C //////////
	SCL,
	SDA,
	//////////// SDRAM //////////
	SDRAM_ADDR,
	SDRAM_BA,
	SDRAM_CAS_N,
	SDRAM_CKE,
	SDRAM_CLK,
	SDRAM_CS_N,
	SDRAM_DQ,
	SDRAM_DQM,
	SDRAM_RAS_N,
	SDRAM_WE_N,

	//////////// EPCS //////////
	EPCS_ASDO,
	EPCS_DATA0,
	EPCS_DCLK,
	EPCS_NCSO,
	//////////// UART //////////
	UART_RX,
	UART_TX
	
);

//=======================================================
//  PARAMETER declarations
//=======================================================
`define cnt_us 100
`define cnt_10us 1250
`define cnt_ms 125000
`define cnt_10ms 1250000
`define cnt_1000ms 125000000

//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;

//////////// LED //////////
output		     		LED1;
output		     		LED2;
//////////// PROBE //////////
output							P_K5;
//////////// DAC //////////
output		    [16-1:0]	DAC1;
output		    [16-1:0]	DAC2;
output 						DAC_CLK;
output						DAC_RST;
//////////// ADC //////////
input				 [14-1:0]	ADC_D1;
input								ADC_OF1;
output							ADC_CLK;
//////////// SPI ADDA //////////
input							MISO;
output						MOSI;
output						SCLK;					
output						CS_ADC;
output						CS_DAC;
//////////// TRIGGER //////////
input							TRIG_IN;
//////////// I2C //////////
output 						SCL;
inout 						SDA;
//////////// SDRAM //////////
output		    [12:0]		SDRAM_ADDR;
output		     [1:0]		SDRAM_BA;
output		          		SDRAM_CAS_N;
output		          		SDRAM_CKE;
output		          		SDRAM_CLK;
output		          		SDRAM_CS_N;
inout 		    [15:0]		SDRAM_DQ;
output		     [1:0]		SDRAM_DQM;
output		          		SDRAM_RAS_N;
output		          		SDRAM_WE_N;

//////////// EPCS //////////
output		          		EPCS_ASDO;
input 		          		EPCS_DATA0;
output		          		EPCS_DCLK;
output		          		EPCS_NCSO;
//////////// UART //////////
input								UART_RX;
output							UART_TX;

//=======================================================
//  REG/WIRE declarations
//=======================================================

reg [31:0] cnt = `cnt_1000ms, cnt_dac = `cnt_us ;
reg [1:0] r_led = {1'b1, 1'b0};
reg [15:0] r_dac_cnt = 16'd0;
reg signed [32-1:0] r_kal_out; 
wire locked;
wire [1:0] SS;
wire CPU_CLK;

wire [31:0] o_var_timer_rst, o_var_freq, o_var_amp_H, o_var_amp_L, o_var_fb_ON;
wire [31:0] o_var_polarity, o_var_waitCnt, o_var_offset, o_var_errAvg, o_var_errTh;
wire [31:0] o_var_gainSel_step, o_var_gainSel_ramp, o_var_const_step, o_var_kal_Q, o_var_kal_R;
wire [31:0] o_var_Vp, o_var_Vn, o_var_LED1;
wire [15:0] ladder_wave, phase_ramp;
wire [31:0] i_var_timer, i_var_step, i_var_step_ori, i_var_err, i_var_err_kal, i_var_fb_on;
wire signed [31:0] adc_kal;
//--- rstn gen---//
wire ext_rst_n;
//--- mod gen---//
wire [31:0] o_mod_out;
wire o_status, o_stepTrig;
//--- err sig gen---//
wire [31:0] o_err, o_adc;
wire [3:0] o_cstate, o_nstate;
wire o_step_sync, o_step_sync_dly, o_rate_sync, o_ramp_sync;
//--- fb step gen---//
wire [31:0] o_step, o_step_MV;
//--- phase ramp gen---//
wire [31:0] o_phaseRamp;
reg [31:0] r_phaseRamp;

wire[15:0] chat_gpt_clk;

reg signed [31:0] r_ramp;

reg signed [31:0] r_mod;
wire [31:0] filter_adc;

reg [31:0] r_adc, r_adc2;

//=======================================================
//  Structural coding
//=======================================================


assign DAC1 =  o_phaseRamp[15:0];
assign DAC2 =  ~o_phaseRamp[15:0];


assign DAC_RST = 1'b0;

assign i_var_err = o_err;
assign i_var_err_kal = r_kal_out;
 assign i_var_step_ori = o_step; 
//assign i_var_step_ori = o_step_MV;

assign CS_DAC = SS[0];
assign CS_ADC = SS[1];

assign LED1 = 1'b1;



pll	pll_inst (
	.inclk0 ( CLOCK_50 ),
	.c0 ( DAC_CLK ),
	.c1 ( SDRAM_CLK ),
	.c2 ( CPU_CLK ),
	.c3 ( ADC_CLK ),
	.locked ( locked )
	);


	
timer
#(.COUNTER_NUM(10000))
u_timer (
// port map - connection between master ports and signals/registers   
	.i_clk(DAC_CLK),
	.i_rst_n(locked),
	.i_timer_rst(o_var_timer_rst),
	.o_timer(i_var_timer)
);	
	

modulation_gen_v2 mod_gen_inst(
	.i_amp_H(o_var_amp_H),
	.i_amp_L(o_var_amp_L),
	.i_clk(DAC_CLK),
	.i_freq_cnt(o_var_freq),
	.i_rst_n(locked),
	.o_SM(),
	.o_mod_out(o_mod_out),
	.o_status(o_status),
	.o_stepTrig(o_stepTrig)

);

reg [3:0] temp_cs = 4'd0; 
reg [31:0] temp_wc = 32'd0;
reg r_stepTrig = 1'b0;


///***
err_signal_gen_v4 err_signal_gen_inst(
	.i_clk(DAC_CLK),
	.i_rst_n(locked),
	.i_status(o_status),
	.i_polarity(o_var_polarity),
	.i_trig(o_stepTrig), 
//	.i_trig(r_stepTrig), 
	.i_wait_cnt(o_var_waitCnt),
	// .i_wait_cnt(32'd65),
	.i_err_offset(o_var_offset),
	.i_adc_data(ADC_D1),
//	.i_adc_data(filter_adc),
	.i_avg_sel(o_var_errAvg),
	.o_err(o_err),
	.o_step_sync(o_step_sync),
	.o_step_sync_dly(o_step_sync_dly),
	.o_rate_sync(o_rate_sync),
	.o_ramp_sync(o_ramp_sync),
	.o_adc(o_adc),
	.o_adc_sum(),
	// .o_change(),
	.o_cstate(o_cstate),
//	.o_adc_new(o_adc_new),
//	.o_flip_flag(),
	.o_nstate(o_nstate)
//	.o_adc_old(o_adc_old)
);
//***/


///***
feedback_step_gen_v4 fb_step_gen_inst(
	.i_clk(DAC_CLK),
	.i_const_step(o_var_const_step),
	.i_err(o_err),
//	.i_err(r_kal_out),
	.i_fb_ON(o_var_fb_ON),
	.i_gain_sel(o_var_gainSel_step),
	.i_rst_n(locked),
	.i_trig(o_step_sync),
	.i_trig_dly(o_step_sync_dly),
	.o_fb_ON(i_var_fb_on),
	.o_gain_sel(),
	.o_gain_sel2(),
	.o_step(o_step),
	.o_step_pre(),
	.o_status(),
	.o_change(),
	.o_step_init() 
);
//***/

//SMA_v1
//#(.WINDOW_SIZE(8192))
//uSMA
//(
//.i_clk(DAC_CLK),
//.i_rst_n(locked),
//.i_update_strobe(o_rate_sync),
////.i_window_sel(32'd12), 
//.i_window_sel(o_var_kal_R), 
//.i_data(o_step),
//.o_data(o_step_MV)
//);

///***
phase_ramp_gen phase_ramp_gen_inst(
	.i_clk(DAC_CLK),
	.i_fb_ON(o_var_fb_ON),
	.i_gain_sel(o_var_gainSel_ramp),
	.i_mod(o_mod_out),
	.i_rst_n(locked),
	.i_step(o_step),
	.i_rate_trig(o_rate_sync),
	.i_ramp_trig(o_ramp_sync),
	.i_mod_trig(o_stepTrig),
	// .i_mod_trig(r_stepTrig),
	.o_change(),
	.o_gain_sel(),
	.o_gain_sel2(),
	.o_phaseRamp_pre(),
	.o_phaseRamp(o_phaseRamp),
	.o_ramp_init()
);
//***/

 CPU u0 (
	.clk_clk       (CPU_CLK),       //      clk.clk
	.reset_reset_n (locked), //    reset.reset_n
	.spi_adda_MISO (MISO), // spi_adda.MISO
	.spi_adda_MOSI (MOSI), //         .MOSI
	.spi_adda_SCLK (SCLK), //         .SCLK
	.spi_adda_SS_n (SS),  //         .SS_n
	.sdram_addr    (SDRAM_ADDR),    //    sdram.addr
	.sdram_ba      (SDRAM_BA),      //         .ba
	.sdram_cas_n   (SDRAM_CAS_N),   //         .cas_n
	.sdram_cke     (SDRAM_CKE),     //         .cke
	.sdram_cs_n    (SDRAM_CS_N),    //         .cs_n
	.sdram_dq      (SDRAM_DQ),      //         .dq
	.sdram_dqm     (SDRAM_DQM),     //         .dqm
	.sdram_ras_n   (SDRAM_RAS_N),   //         .ras_n
	.sdram_we_n    (SDRAM_WE_N),     //         .we_n
	.epcs_dclk     (EPCS_DCLK),     //     epcs.dclk
	.epcs_sce      (EPCS_NCSO),      //         .sce
	.epcs_sdo      (EPCS_ASDO),      //         .sdo
	.epcs_data0    (EPCS_DATA0),     //         .data0
	.varset_o_reg0  (o_var_freq),  //   varset.o_reg1
	.varset_o_reg1  (o_var_amp_H),  //         .o_reg2
	.varset_o_reg2  (o_var_amp_L),  //         .o_reg3
	.varset_o_reg3  (o_var_offset),  //         .o_reg6
	.varset_o_reg4  (o_var_polarity),  //         .o_reg4
	.varset_o_reg5  (o_var_waitCnt),  //         .o_reg5
	.varset_o_reg6  (o_var_errTh),  //         .o_reg8
	.varset_o_reg7  (o_var_errAvg),  //         .o_reg7
	.varset_o_reg8  (o_var_timer_rst),  //         .o_reg0
	.varset_o_reg9  (o_var_gainSel_step),  //         .o_reg9
	.varset_o_reg10 (o_var_gainSel_ramp), //         .o_reg10
	.varset_o_reg11 (o_var_fb_ON), //         .o_reg11
	.varset_o_reg12 (o_var_const_step), //         .o_reg12
	.varset_o_reg13 (o_var_kal_Q), //         .o_reg13
	.varset_o_reg14 (o_var_kal_R), //         .o_reg14
	.varset_o_reg15 (o_var_LED1), //         .o_reg15
	.varset_o_reg16 (), //         .o_reg16
	.varset_o_reg17 (), //         .o_reg17
	.varset_o_reg18 (), //         .o_reg18
	.varset_o_reg19 (), //         .o_reg19
	.varset_o_reg20 (), //         .o_reg20
	.varset_o_reg21 (), //         .o_reg21
	.varset_o_reg22 (), //         .o_reg22
	.varset_o_reg23 (), //         .o_reg23
	.varset_o_reg24 (), //         .o_reg24
	.varset_i_var0  (i_var_timer),  //         .i_var0
	.varset_i_var1  (i_var_step),  //         .i_var1
	.varset_i_var2  (o_var_amp_H),  //         .i_var2
	.varset_i_var3  (o_var_amp_L),  //         .i_var3
	.varset_i_var4  (i_var_err),  //         .i_var4
	.varset_i_var5  (o_var_offset),  //         .i_var5
	.varset_i_var6  (i_var_step_ori),  //         .i_var6
	.varset_i_var7  (i_var_fb_on),  //         .i_var7
	.varset_i_var8  (o_nstate),  //         .i_var8
	.varset_i_var9  (o_cstate),  //         .i_var9
	.varset_i_var10 (i_var_err_kal), //         .i_var10
	.varset_i_var11 (), //         .i_var11
	.varset_i_var12 (), //         .i_var12
	.varset_i_var13 (), //         .i_var13
	.varset_i_var14 (), //         .i_var14
	.varset_i_var15 (), //         .i_var15
	.varset_i_var16 (), //         .i_var16
	.varset_i_var17 (), //         .i_var17
	.varset_i_var18 (), //         .i_var18
	.varset_i_var19 (), //         .i_var19
	.varset_i_var20 (), //         .i_var20
	.varset_i_var21 (), //         .i_var21
	.varset_i_var22 (), //         .i_var22
	.varset_i_var23 (), //         .i_var23
	.varset_i_var24 (),  //        .i_var24
	.uart_rxd(UART_RX),       //     uart.rxd
	.uart_txd(UART_TX),        //        .txd
	.i2c_scl_export (SCL), //  i2c_scl.export
	.i2c_sda_export (SDA),  //  i2c_sda.export
	.trigger_in_export (TRIG_IN) 
 );
 
 
endmodule
